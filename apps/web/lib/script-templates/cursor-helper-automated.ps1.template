# Fully Automated Cursor Login Helper
# This script opens a browser, waits for successful login, and automatically captures session data

param(
    [int]$TimeoutSeconds = 300,  # 5 minutes timeout
    [int]$CheckIntervalSeconds = 5  # Check every 5 seconds
)

Write-Host "=== Fully Automated Cursor Login Helper ===" -ForegroundColor Green
Write-Host "This helper will:"
Write-Host "1. Open your browser to perform SSO"
Write-Host "2. Wait for you to complete authentication"
Write-Host "3. Automatically capture and upload session data"
Write-Host ""

# Function to check if we can reach the Cursor dashboard
function Test-CursorDashboard {
    try {
        $response = Invoke-WebRequest -Uri "https://cursor.com/dashboard" -UseBasicParsing -TimeoutSec 10
        return $response.StatusCode -eq 200
    } catch {
        return $false
    }
}

# Function to create a Node.js helper script for session capture
function Create-SessionCaptureHelper {
    $helperScript = @"
const { chromium } = require('playwright');

const LOGIN_URL = process.argv[2] || process.env.LOGIN_URL || 'https://cursor.com/';
const TIMEOUT_MS = parseInt(process.argv[3], 10) || 300000;
const POLL_INTERVAL_MS = 3000;

async function captureSession() {
    try {
        const browser = await chromium.launch({ headless: false });
        const context = await browser.newContext();
        const page = await context.newPage();

        // Navigate to the login URL
        await page.goto(LOGIN_URL, { waitUntil: 'load' });

        const start = Date.now();
        while (Date.now() - start < TIMEOUT_MS) {
            const url = page.url();
            if (url.includes('/dashboard')) {
                break;
            }
            // give the user time to complete SSO
            await page.waitForTimeout(POLL_INTERVAL_MS);
        }

        const finalUrl = page.url();
        if (!finalUrl.includes('/dashboard')) {
            console.error('Timeout waiting for /dashboard. Final URL: ' + finalUrl);
            console.error('Possible causes: SSO not completed, network redirects, or strict browser policies.');
            console.error('If Playwright was just installed, run: npx playwright install chromium');
            await browser.close();
            process.exit(1);
        }

        const cookies = await context.cookies('https://cursor.com');

        const localStorage = await page.evaluate(() => {
            const storage = {};
            for (let i = 0; i < window.localStorage.length; i++) {
                const key = window.localStorage.key(i);
                storage[key] = window.localStorage.getItem(key);
            }
            return storage;
        });

        const sessionStorage = await page.evaluate(() => {
            const storage = {};
            for (let i = 0; i < window.sessionStorage.length; i++) {
                const key = window.sessionStorage.key(i);
                storage[key] = window.sessionStorage.getItem(key);
            }
            return storage;
        });

        const userAgent = await page.evaluate(() => navigator.userAgent);

        const sessionData = {
            cookies: cookies,
            localStorage: localStorage,
            sessionStorage: sessionStorage,
            userAgent: userAgent,
            url: finalUrl
        };

        console.log(JSON.stringify(sessionData));
        await browser.close();
    } catch (error) {
        console.error('Error capturing session:', error && error.stack ? error.stack : error);
        console.error('If Playwright was just installed, run: npx playwright install chromium');
        console.error('To debug run: node session-capture.js "<LOGIN_URL>" 300000');
        process.exit(1);
    }
}

captureSession();
"@

    $helperScript | Out-File -FilePath "session-capture.js" -Encoding UTF8
    Write-Host "Created session capture helper script" -ForegroundColor Green
}

# Function to capture browser session data using Node.js helper
function Get-BrowserSessionData {
    try {
        # Check if Node.js is available
        $nodeVersion = node --version 2>$null
        if (-not $nodeVersion) {
            Write-Host "Node.js not found. Please install Node.js to use automated session capture." -ForegroundColor Red
            return $null
        }
        
        # Check if Playwright is available
        $playwrightCheck = npm list playwright 2>&1
        if ($playwrightCheck -match "empty") {
            Write-Host "Playwright not found. Installing..." -ForegroundColor Yellow
            npm install playwright --silent 2>&1 | Write-Host
        }
        
        # Create the helper script
        Create-SessionCaptureHelper
        
        # Run the helper script and capture both stdout and stderr for diagnostics
        $nodeOutput = & node session-capture.js 2>&1
        $exitCode = $LASTEXITCODE

        if ($exitCode -ne 0) {
            Write-Host "Node helper failed (exit code $exitCode). Output:" -ForegroundColor Red
            Write-Host $nodeOutput
            Write-Host "Common causes: Playwright not installed, Playwright browsers not downloaded (run `npx playwright install chromium`), SSO didn't finish before timeout, or Node/Playwright runtime errors." -ForegroundColor Yellow
            return $null
        }

        # Try to parse output as JSON
        try {
            $sessionData = $nodeOutput | ConvertFrom-Json
            Write-Host "Successfully captured session data" -ForegroundColor Green
            return $sessionData
        } catch {
            Write-Host "Node helper produced non-JSON output. Output:" -ForegroundColor Yellow
            Write-Host $nodeOutput
            Write-Host "Ensure Node and Playwright are installed and the helper script ran correctly." -ForegroundColor Yellow
            return $null
        }
        
    } catch {
        Write-Host "Error in automated session capture: $_" -ForegroundColor Red
        return $null
    } finally {
        # Clean up helper script
        if (Test-Path "session-capture.js") {
            Remove-Item "session-capture.js" -Force
        }
    }
}

# Start the login process
Write-Host "Opening browser to: {{LOGIN_URL}}" -ForegroundColor Cyan
Start-Process "{{LOGIN_URL}}"

Write-Host ""
Write-Host "Please complete the SSO authentication in the opened browser window." -ForegroundColor Yellow
Write-Host "Waiting for authentication to complete..." -ForegroundColor Yellow

# Wait for authentication with timeout
$startTime = Get-Date
$authenticated = $false

while (-not $authenticated -and ((Get-Date) - $startTime).TotalSeconds -lt $TimeoutSeconds) {
    Start-Sleep -Seconds $CheckIntervalSeconds
    
    # Check if we can reach the dashboard
    if (Test-CursorDashboard) {
        $authenticated = $true
        Write-Host "Authentication detected! Dashboard is accessible." -ForegroundColor Green
        break
    }
    
    $elapsed = [math]::Round(((Get-Date) - $startTime).TotalSeconds)
    Write-Host "Waiting... ($elapsed/$TimeoutSeconds seconds)" -ForegroundColor Gray
}

if (-not $authenticated) {
    Write-Host "Timeout reached. Please try again or complete authentication manually." -ForegroundColor Red
    exit 1
}

# Try to capture session data automatically
Write-Host "Attempting to capture session data..." -ForegroundColor Cyan
$sessionData = Get-BrowserSessionData

if (-not $sessionData) {
    # Fallback to manual input
    Write-Host ""
    Write-Host "Automated capture failed. Please manually copy the session cookie:" -ForegroundColor Yellow
    Write-Host "1. Open browser developer tools (F12)" -ForegroundColor Yellow
    Write-Host "2. Go to Application/Storage tab" -ForegroundColor Yellow
    Write-Host "3. Find the 'session' cookie under Cookies" -ForegroundColor Yellow
    Write-Host "4. Copy its value" -ForegroundColor Yellow
    Write-Host ""
    
    $sessionValue = Read-Host "Paste the session cookie value here"
    
    if ([string]::IsNullOrWhiteSpace($sessionValue)) {
        Write-Host "No session provided. Exiting." -ForegroundColor Red
        exit 1
    }
    
    # Create session data in the expected format
    $sessionData = @{
        session = $sessionValue
    }
}

# Upload session data
Write-Host "Uploading session data to server..." -ForegroundColor Cyan

try {
    if ($sessionData.session) {
        # Legacy format - single session cookie
        $body = @{ session = $sessionData.session } | ConvertTo-Json
    } else {
        # New format - full session data
        $body = @{ sessionData = $sessionData } | ConvertTo-Json
    }
    
    $response = Invoke-RestMethod -Uri "{{ORIGIN}}/api/auth/upload-session" -Method Post -Body $body -ContentType 'application/json'
    
    if ($response.success) {
        Write-Host "Session uploaded successfully!" -ForegroundColor Green
        Write-Host "You can now return to the login helper and click Refresh Status." -ForegroundColor Green
    } else {
        Write-Host "Upload failed: $($response.error)" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "Upload failed: $_" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "=== Login Helper Complete ===" -ForegroundColor Green
