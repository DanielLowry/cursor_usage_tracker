name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:      

  test:
    name: Lint & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4

      # Node from .nvmrc; no pnpm cache here (pnpm not on PATH yet)
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      # Make pnpm available according to package.json > packageManager (Corepack ships with Node)
      - name: Enable Corepack
        run: corepack enable

      # Start a local Postgres (not docker)
      - name: Setup Postgres
        uses: ankane/setup-postgres@v1
        with:
          database: cursor_usage_tracker

      
      # Cache pnpm store (works the same on Linux & Windows)
      - name: Compute pnpm store path
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - run: pnpm --version

      - run: pnpm install --frozen-lockfile

      - run: pnpm --filter @cursor-usage/worker run install_playwright 

      - name: Prisma Generate
        run: pnpm --filter @cursor-usage/db run db:generate

      - name: Build dependent packages
        run: |
          # Ensure workspace packages that Next may import are built first
          pnpm --filter @cursor-usage/ingest build || true
          pnpm --filter @cursor-usage/db build || true

      - name: Build
        run: pnpm build

      - name: Start Redis (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          docker run -d --name redis -p 6379:6379 redis:7-alpine
          # wait for Redis to be ready
          for i in {1..30}; do
            if docker exec redis redis-cli ping | grep PONG; then
              echo "Redis is ready"; break; fi; sleep 1; done

      # Set password using the postgres OS user (no password required yet)
      - name: Set Postgres password (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          sudo -u postgres psql -d postgres -c "ALTER USER postgres WITH PASSWORD 'postgres';"   
        

      - name: DB Smoke
        run: pnpm exec tsx scripts/db-smoke.ts
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cursor_usage_tracker


      # Test database migration files
      - name: Prisma Migrate Deploy
        run: pnpm --filter @cursor-usage/db run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cursor_usage_tracker

      - name: DB Index Usage Test
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: pnpm --filter @cursor-usage/db run test:indexes
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cursor_usage_tracker

      - name: DB Connection Test
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: pnpm --filter @cursor-usage/db run test:db
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cursor_usage_tracker

      - name: Queue Smoke Test
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: pnpm --filter @cursor-usage/queues run test
        env:
          REDIS_URL: redis://127.0.0.1:6379




      - name: Print and Validate Config (Success Case)
        run: pnpm print:config
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          REDIS_URL: "redis://localhost:6379"
          AUTH_SECRET: "test-secret"

      - run: pnpm lint

      # - name: Typecheck
      #   run: pnpm typecheck
    

      - name: Test
        run: pnpm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cursor_usage_tracker