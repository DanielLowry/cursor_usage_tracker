name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Lint & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]  # If you want super-stable, pin: [ubuntu-22.04, windows-2022]

    steps:
      - uses: actions/checkout@v4

      # Node from .nvmrc; no pnpm cache here (pnpm not on PATH yet)
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      # Make pnpm available according to package.json > packageManager (Corepack ships with Node)
      - name: Enable Corepack
        run: corepack enable

      # Cache pnpm store (works the same on Linux & Windows)
      - name: Compute pnpm store path
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - run: pnpm --version
      - run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Print and Validate Config (Success Case)
        run: pnpm print:config
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          REDIS_URL: "redis://localhost:6379"
          AUTH_SECRET: "test-secret"

      - name: Validate Config (Failure Case) [Unix]
        if: runner.os != 'Windows'
        run: |
          # This command is expected to fail, so we invert the exit code.
          # `&& exit 1` makes the step fail if the command succeeds.
          # `|| exit 0` makes the step succeed if the command fails.
          SMTP_PORT="not-a-number" pnpm print:config && exit 1 || exit 0

      - name: Validate Config (Failure Case) [Windows]
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          try {
            $env:SMTP_PORT="not-a-number"; pnpm print:config
            throw "The command was expected to fail, but it succeeded."
          } catch {
            Write-Host "Command failed as expected, which is correct."
          }

      - run: pnpm lint

      # - name: Typecheck
      #   run: pnpm typecheck

      - name: Build
        run: pnpm build

      - name: Test
        run: pnpm test
