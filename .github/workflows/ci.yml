name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Lint & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      # Node from .nvmrc; no pnpm cache here (pnpm not on PATH yet)
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      # Make pnpm available according to package.json > packageManager (Corepack ships with Node)
      - name: Enable Corepack
        run: corepack enable

      # Linux-only: start a Postgres service via Docker to exercise DB integration
      - name: Start Postgres (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          docker rm -f cursor_usage_tracker_pg || true
          docker run --name cursor_usage_tracker_pg \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_DB=cursor_usage_tracker \
            -p 5432:5432 \
            -d postgres:15

      - name: Wait for Postgres (Linux)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          for i in {1..60}; do
            if docker exec cursor_usage_tracker_pg pg_isready -U postgres; then
              echo "Postgres ready"; break;
            fi
            sleep 1
          done


      # Windows-only: start a local Postgres (no Docker)
      - name: Setup Postgres (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        uses: ankane/setup-postgres@v1
        with:
          postgres-version: 15
          database: cursor_usage_tracker
          
      # Set password so your existing DATABASE_URL keeps working
      - name: Set Postgres password (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          psql -U postgres -d postgres -c "ALTER USER postgres WITH PASSWORD 'postgres';"      

      
      # Cache pnpm store (works the same on Linux & Windows)
      - name: Compute pnpm store path
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> "$GITHUB_OUTPUT"

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - run: pnpm --version
      - run: pnpm install --frozen-lockfile

      - name: Prisma Generate
        run: pnpm --filter @cursor-usage/db run db:generate
        
      # Test database migration files
      - name: Prisma Migrate Deploy
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: pnpm --filter @cursor-usage/db run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cursor_usage_tracker

      - name: DB Connection Test
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: pnpm --filter @cursor-usage/db run test:db
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/cursor_usage_tracker

      - name: Build
        run: pnpm build

      - name: Print and Validate Config (Success Case)
        run: pnpm print:config
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test"
          REDIS_URL: "redis://localhost:6379"
          AUTH_SECRET: "test-secret"

      - name: Validate Config (Failure Case) [Unix]
        if: runner.os != 'Windows'
        run: |
          # This command is expected to fail, so we invert the exit code.
          # `&& exit 1` makes the step fail if the command succeeds.
          # `|| exit 0` makes the step succeed if the command fails.
          SMTP_PORT="not-a-number" pnpm print:config && exit 1 || exit 0

      - name: Validate Config (Failure Case) [Windows]
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Set the environment variable for this command
          $env:SMTP_PORT = 'not-a-number'
          # Run the command, which is expected to fail.
          pnpm print:config
          # Check the exit code of the last native command.
          # We expect it to fail (non-zero), so if it succeeds (zero), we fail the step.
          if ($LASTEXITCODE -eq 0) {
            Write-Error 'The command was expected to fail, but it succeeded.'
            exit 1
          } else {
            Write-Host "Command failed as expected, which is correct. Exit code was $LASTEXITCODE."
            exit 0 # Explicitly exit with 0 to mark the step as successful.
          }

      - run: pnpm lint

      # - name: Typecheck
      #   run: pnpm typecheck

      - name: Build
        run: pnpm build

      - name: Test
        run: pnpm test