// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for model fields
enum DataSource {
  network_json
  dom_table

  @@map("data_source")
}

enum BlobKind {
  network_json
  html

  @@map("blob_kind")
}

enum AlertKind {
  threshold_hit
  projection_overrun
  scrape_error
  no_data_24h

  @@map("alert_kind")
}

// Models for Phase P2.2
model UsageEvent {
  id          String     @id @default(uuid()) @db.Uuid
  captured_at DateTime   @db.Timestamptz()
  model       String
  row_hash    String?    @unique
  source_row  Json?
  input_with_cache_write_tokens    Int
  input_without_cache_write_tokens Int
  cache_read_tokens                Int
  output_tokens                    Int
  total_tokens                     Int
  api_cost_cents                   Int
  cost_to_you_cents                Int
  billing_period_start DateTime? @db.Date
  billing_period_end   DateTime? @db.Date
  source      DataSource
  raw_blob    RawBlob?  @relation(fields: [raw_blob_id], references: [id])
  raw_blob_id String?   @db.Uuid

  @@map("usage_events")
  @@index([captured_at])
}

model Snapshot {
  id            String   @id @default(uuid()) @db.Uuid
  captured_at   DateTime @db.Timestamptz()
  billing_period_start DateTime? @db.Date
  billing_period_end   DateTime? @db.Date
  table_hash    String
  rows_count    Int

  @@map("snapshots")
  @@index([captured_at])
  @@unique([billing_period_start, billing_period_end, table_hash])
}

model RawBlob {
  id          String    @id @default(uuid()) @db.Uuid
  captured_at DateTime  @db.Timestamptz()
  kind        BlobKind
  url         String?
  payload     Bytes
  content_hash String?  @db.Text
  content_type String?  @db.Text
  schema_version String? @db.Text
  metadata     Json?
  usage_events UsageEvent[]

  @@map("raw_blobs")
}

model Budget {
  id                     String   @id @default(uuid()) @db.Uuid
  effective_budget_cents Int
  created_at             DateTime @default(now()) @db.Timestamptz()

  @@map("budgets")
}

model Alert {
  id           String    @id @default(uuid()) @db.Uuid
  kind         AlertKind
  details      String
  triggered_at DateTime  @db.Timestamptz()
  cleared_at   DateTime? @db.Timestamptz()

  @@map("alerts")
  @@index([triggered_at])
}

model MetricHourly {
  id         String   @id @default(uuid()) @db.Uuid
  metric_key String
  ts_hour    DateTime @db.Timestamptz()
  value      Int

  @@map("metric_hourly")
  @@index([metric_key, ts_hour])
}

model MetricDaily {
  id         String   @id @default(uuid()) @db.Uuid
  metric_key String
  date       DateTime @db.Date
  value      Int

  @@map("metric_daily")
  @@index([metric_key, date])
}
