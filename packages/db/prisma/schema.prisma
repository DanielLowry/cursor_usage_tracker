// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for model fields
enum DataSource {
  network_json
  dom_table

  @@map("data_source")
}

enum BlobKind {
  network_json
  html

  @@map("blob_kind")
}

enum AlertKind {
  threshold_hit
  projection_overrun
  scrape_error
  no_data_24h

  @@map("alert_kind")
}

model UsageEvent {
  row_hash                           String   @id @db.Text
  captured_at                        DateTime @db.Timestamptz()
  kind                               String?
  model                              String
  max_mode                           String?
  input_with_cache_write_tokens      Int
  input_without_cache_write_tokens   Int
  cache_read_tokens                  Int
  output_tokens                      Int
  total_tokens                       Int
  api_cost_cents                     Int
  api_cost_raw                       String?  @db.Text
  cost_to_you_cents                  Int
  cost_to_you_raw                    String?  @db.Text
  billing_period_start               DateTime? @db.Date
  billing_period_end                 DateTime? @db.Date
  source                             String
  first_seen_at                      DateTime @db.Timestamptz()
  last_seen_at                       DateTime @db.Timestamptz()
  logic_version                      Int?
  event_ingestions                   EventIngestion[]

  @@map("usage_event")
  @@index([billing_period_start, billing_period_end])
}

model RawBlob {
  id            String   @id @default(uuid()) @db.Uuid
  captured_at   DateTime @db.Timestamptz()
  kind          BlobKind
  url           String?
  payload       Bytes
  content_hash  String   @db.Text
  content_type  String?  @db.Text
  schema_version String? @db.Text
  metadata      Json?

  ingestions    Ingestion[]

  // no direct relation to UsageEvent anymore

  @@unique([content_hash])
  @@map("raw_blobs")
}

model Ingestion {
  id            String   @id @default(uuid()) @db.Uuid
  source        String
  ingested_at   DateTime @db.Timestamptz()
  content_hash  String?  @db.Text
  headers       Json?
  metadata      Json?
  status        String
  raw_blob_id   String?  @db.Uuid
  raw_blob      RawBlob? @relation(fields: [raw_blob_id], references: [id])
  events        EventIngestion[]

  @@map("ingestion")
  @@unique([content_hash])
  @@index([ingested_at])
}

model EventIngestion {
  row_hash     String
  ingestion_id String  @db.Uuid

  usage_event UsageEvent @relation(fields: [row_hash], references: [row_hash])
  ingestion   Ingestion  @relation(fields: [ingestion_id], references: [id])

  @@id([row_hash, ingestion_id])
  @@map("event_ingestion")
  @@index([ingestion_id])
}

model Budget {
  id                     String   @id @default(uuid()) @db.Uuid
  effective_budget_cents Int
  created_at             DateTime @default(now()) @db.Timestamptz()

  @@map("budgets")
}

model Alert {
  id           String    @id @default(uuid()) @db.Uuid
  kind         AlertKind
  details      String
  triggered_at DateTime  @db.Timestamptz()
  cleared_at   DateTime? @db.Timestamptz()

  @@map("alerts")
  @@index([triggered_at])
}

model MetricHourly {
  id         String   @id @default(uuid()) @db.Uuid
  metric_key String
  ts_hour    DateTime @db.Timestamptz()
  value      Int

  @@map("metric_hourly")
  @@index([metric_key, ts_hour])
}

model MetricDaily {
  id         String   @id @default(uuid()) @db.Uuid
  metric_key String
  date       DateTime @db.Date
  value      Int

  @@map("metric_daily")
  @@index([metric_key, date])
}
